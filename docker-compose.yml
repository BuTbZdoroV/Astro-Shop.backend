version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  user_service_db:
    image: postgres:13
    container_name: user_service_db
    environment:
      POSTGRES_USER: butbzdorov
      POSTGRES_PASSWORD: 102938asd
      POSTGRES_DB: user_service_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - microservices-net

  product_service_db:
    image: postgres:13
    container_name: product_service_db
    environment:
      POSTGRES_USER: butbzdorov
      POSTGRES_PASSWORD: 102938asd
      POSTGRES_DB: product_service_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    volumes:
      - product_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - microservices-net

  review_service_db:
    image: postgres:13
    container_name: review_service_db
    environment:
      POSTGRES_USER: butbzdorov
      POSTGRES_PASSWORD: 102938asd
      POSTGRES_DB: review_service_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5435:5432"
    volumes:
      - review_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - microservices-net

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  user_data: {}
  product_data: {}
  review_data: {}
  redis_data: {}